import { z } from "zod";
import { profile } from "../db/schema/auth-schema";
import { currencyCodeSchema } from "@/zod-schemas/currency-schemas";
import type { CurrencyCode } from "@/constants/currency.constants";

export const xeProfileResponseSchema = z.object({
  profile: z.object({
    profileId: z.number(),
    onlineCredentialId: z.number(),
    clientId: z.number(),
    clientNumber: z.string(),
    accountType: z.string(),
    accountStatus: z.string(),
    accountKycStatus: z.string(),
    accountRestricted: z.boolean(),
    businessUnitId: z.number(),
    region: z.string(),
    brandRegionId: z.number(),
    trmBusinessUnitId: z.number(),
    fullName: z.object({
      firstName: z.string(),
      lastName: z.string(),
    }),
    accountName: z.string(),
    freeFormatAddress: z.object({
      addressLine1: z.string(),
      place: z.string(),
      county: z.string(),
      postalCode: z.string(),
    }),
    addressLastModified: z.string(),
    country: z.string(),
    email: z.string().email(),
    emailLastModified: z.string(),
    mobileNumber: z.object({
      mobilePrefix: z.string(),
      mobilePhone: z.string(),
    }),
    dateOfBirth: z.string(),
    termsAndConditions: z.object({
      acceptedDate: z.string(),
      isValid: z.boolean(),
    }),
    preferredLanguage: z.string(),
    kycRefreshDueDate: z.string(),
    kycRefreshStatus: z.string(),
    createdDate: z.string(),
    platform: z.string(),
    documentStatus: z.string(),
    features: z.object({
      rpaEnabled: z.boolean(),
      viewBalance: z.boolean(),
      useBalance: z.boolean(),
      marketOrder: z.boolean(),
      quickTransactionsEnabled: z.boolean(),
    }),
    sameCurrencySupported: z.boolean(),
    canProvideRecipientLater: z.boolean(),
    balancesEnabled: z.boolean(),
    transactionViewEnabled: z.boolean(),
    canSetupInputterAuthoriserUserRoles: z.boolean(),
    userRole: z.object({
      name: z.string(),
      privileges: z.array(z.string()),
    }),
    expectedTradeCurrency: currencyCodeSchema,
    expectedPayoutCurrency: currencyCodeSchema,
    expectedAnnualTradingVolume: z.number(),
    regionalAccountingCurrency: currencyCodeSchema,
    expectedVolumeInRegionalAccountingCurrency: z.number(),
    expectedFrequency: z.string(),
    onlineDirectDebitEnabled: z.boolean(),
    canUseOnlineDealing: z.boolean(),
    unitcode: z.string(),
    brandId: z.number(),
    lastTradedDate: z.string(),
    maxScheduledPaymentDays: z.number(),
    onlineCredentialStatus: z.string(),
    modifyRolesEnabled: z.boolean(),
  }),
  id: z.number(),
  firstName: z.string(),
  lastName: z.string(),
  address: z.string(),
  city: z.string(),
  postalCode: z.string(),
  country: z.string(),
  homePhone: z.object({
    isValid: z.boolean(),
  }),
  mobilePhone: z.object({
    countryCode: z.number(),
    number: z.string(),
    phoneNumberNoAreaCode: z.string(),
    phoneNumberFormatted: z.string(),
    isValid: z.boolean(),
  }),
  twoFANumber: z.object({
    isValid: z.boolean(),
  }),
  dateOfBirth: z.string(),
  securityQuestions: z.array(z.unknown()),
  willReceiveEmailMarketing: z.boolean(),
  willReceiveSmsMarketing: z.boolean(),
  willReceiveSmsNotifications: z.boolean(),
  disabled: z.boolean(),
  hasTaxId: z.boolean(),
  identification: z.object({
    customerId: z.number(),
    manualApprovalFound: z.boolean(),
    idVerificationRequired: z.boolean(),
  }),
  status: z.object({
    profileActionsRequired: z.array(z.unknown()),
    canTransact: z.boolean(),
    kycFailed: z.boolean(),
  }),
  willReceivePhoneMarketing: z.boolean(),
  willReceivePostalMarketing: z.boolean(),
  preferredLanguage: z.string(),
  isKycRefreshRequired: z.boolean(),
  fxWebCorpMigrated: z.boolean(),
  extraFields: z.object({
    addressLine1: z.string(),
    addressLine2: z.string().nullable(),
    addressLine3: z.string().nullable(),
    place: z.string(),
    county: z.string(),
    shortCounty: z.string().nullable(),
    postalCode: z.string(),
  }),
});

export type XeProfile = z.infer<typeof xeProfileResponseSchema>;

export const mapToXeProfileResponse = (
  rawProfile: typeof profile.$inferSelect
): XeProfile => {
  return {
    profile: {
      profileId: rawProfile.profileId,
      onlineCredentialId: rawProfile.onlineCredentialId,
      clientId: rawProfile.clientId,
      clientNumber: rawProfile.clientNumber,
      accountType: rawProfile.accountType,
      accountStatus: rawProfile.accountStatus,
      accountKycStatus: rawProfile.accountKycStatus,
      accountRestricted: rawProfile.accountRestricted,
      businessUnitId: rawProfile.businessUnitId,
      region: rawProfile.region,
      brandRegionId: rawProfile.brandRegionId,
      trmBusinessUnitId: rawProfile.trmBusinessUnitId,
      fullName: {
        firstName: rawProfile.fullNameFirstName,
        lastName: rawProfile.fullNameLastName,
      },
      accountName: rawProfile.accountName,
      freeFormatAddress: {
        addressLine1: rawProfile.freeFormatAddressLine1,
        place: rawProfile.freeFormatAddressPlace,
        county: rawProfile.freeFormatAddressCounty,
        postalCode: rawProfile.freeFormatAddressPostalCode,
      },
      addressLastModified: rawProfile.addressLastModified,
      country: rawProfile.country,
      email: rawProfile.email,
      emailLastModified: rawProfile.emailLastModified,
      mobileNumber: {
        mobilePrefix: rawProfile.mobileNumberPrefix,
        mobilePhone: rawProfile.mobileNumberPhone,
      },
      dateOfBirth: rawProfile.dateOfBirth,
      termsAndConditions: {
        acceptedDate: rawProfile.termsAndConditionsAcceptedDate,
        isValid: rawProfile.termsAndConditionsIsValid,
      },
      preferredLanguage: rawProfile.preferredLanguage,
      kycRefreshDueDate: rawProfile.kycRefreshDueDate,
      kycRefreshStatus: rawProfile.kycRefreshStatus,
      createdDate: rawProfile.createdDate,
      platform: rawProfile.platform,
      documentStatus: rawProfile.documentStatus,
      features: {
        rpaEnabled: rawProfile.featuresRpaEnabled,
        viewBalance: rawProfile.featuresViewBalance,
        useBalance: rawProfile.featuresUseBalance,
        marketOrder: rawProfile.featuresMarketOrder,
        quickTransactionsEnabled: rawProfile.featuresQuickTransactionsEnabled,
      },
      sameCurrencySupported: rawProfile.sameCurrencySupported,
      canProvideRecipientLater: rawProfile.canProvideRecipientLater,
      balancesEnabled: rawProfile.balancesEnabled,
      transactionViewEnabled: rawProfile.transactionViewEnabled,
      canSetupInputterAuthoriserUserRoles:
        rawProfile.canSetupInputterAuthoriserUserRoles,
      userRole: {
        name: rawProfile.userRoleName,
        privileges: Array.isArray(rawProfile.userRolePrivileges)
          ? rawProfile.userRolePrivileges
          : JSON.parse(rawProfile.userRolePrivileges || "[]"),
      },
      expectedTradeCurrency: rawProfile.expectedTradeCurrency as CurrencyCode,
      expectedPayoutCurrency: rawProfile.expectedPayoutCurrency as CurrencyCode,
      expectedAnnualTradingVolume: rawProfile.expectedAnnualTradingVolume,
      regionalAccountingCurrency: rawProfile.regionalAccountingCurrency as CurrencyCode,
      expectedVolumeInRegionalAccountingCurrency:
        rawProfile.expectedVolumeInRegionalAccountingCurrency,
      expectedFrequency: rawProfile.expectedFrequency,
      onlineDirectDebitEnabled: rawProfile.onlineDirectDebitEnabled,
      canUseOnlineDealing: rawProfile.canUseOnlineDealing,
      unitcode: rawProfile.unitcode,
      brandId: rawProfile.brandId,
      lastTradedDate: rawProfile.lastTradedDate,
      maxScheduledPaymentDays: rawProfile.maxScheduledPaymentDays,
      onlineCredentialStatus: rawProfile.onlineCredentialStatus,
      modifyRolesEnabled: rawProfile.modifyRolesEnabled,
    },
    id: 0,
    firstName: rawProfile.fullNameFirstName,
    lastName: rawProfile.fullNameLastName,
    address: rawProfile.freeFormatAddressLine1,
    city: rawProfile.freeFormatAddressPlace,
    postalCode: rawProfile.freeFormatAddressPostalCode,
    country: rawProfile.country,
    homePhone: {
      isValid: false,
    },
    mobilePhone: {
      countryCode:
        parseInt((rawProfile.mobileNumberPrefix || "").replace("+", "")) || 0,
      number: `${rawProfile.mobileNumberPrefix || ""}${rawProfile.mobileNumberPhone || ""}`,
      phoneNumberNoAreaCode: rawProfile.mobileNumberPhone || "",
      phoneNumberFormatted: `${rawProfile.mobileNumberPrefix || ""} ${rawProfile.mobileNumberPhone || ""}`,
      isValid: false,
    },
    twoFANumber: {
      isValid: false,
    },
    dateOfBirth: rawProfile.dateOfBirth,
    securityQuestions: [],
    willReceiveEmailMarketing: true,
    willReceiveSmsMarketing: false,
    willReceiveSmsNotifications: false,
    disabled: false,
    hasTaxId: false,
    identification: {
      customerId: 0,
      manualApprovalFound: false,
      idVerificationRequired: false,
    },
    status: {
      profileActionsRequired: [],
      canTransact: false,
      kycFailed: false,
    },
    willReceivePhoneMarketing: false,
    willReceivePostalMarketing: false,
    preferredLanguage: rawProfile.preferredLanguage,
    isKycRefreshRequired: false,
    fxWebCorpMigrated: false,
    extraFields: {
      addressLine1: rawProfile.freeFormatAddressLine1,
      addressLine2: null,
      addressLine3: null,
      place: rawProfile.freeFormatAddressPlace,
      county: rawProfile.freeFormatAddressCounty,
      shortCounty: null,
      postalCode: rawProfile.freeFormatAddressPostalCode,
    },
  };
};
