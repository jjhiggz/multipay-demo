import { z } from "zod";
import { s } from "@/zod-schemas";

export const xeProfileSchema = z.object({
  profile: z.object({
    profileId: z.number(),
    onlineCredentialId: z.number(),
    clientId: z.number(),
    clientNumber: z.string(),
    accountType: z.string(),
    accountStatus: z.string(),
    accountKycStatus: z.string(),
    accountRestricted: z.boolean(),
    businessUnitId: z.number(),
    region: z.string(),
    brandRegionId: z.number(),
    trmBusinessUnitId: z.number(),
    fullName: z.object({
      firstName: z.string(),
      lastName: z.string(),
    }),
    accountName: z.string(),
    freeFormatAddress: z.object({
      addressLine1: z.string(),
      place: z.string(),
      county: z.string(),
      postalCode: z.string(),
    }),
    addressLastModified: z.string(),
    country: z.string(),
    email: z.string().email(),
    emailLastModified: z.string(),
    mobileNumber: z.object({
      mobilePrefix: z.string(),
      mobilePhone: z.string(),
    }),
    dateOfBirth: z.string(),
    termsAndConditions: z.object({
      acceptedDate: z.string(),
      isValid: z.boolean(),
    }),
    preferredLanguage: z.string(),
    kycRefreshDueDate: z.string(),
    kycRefreshStatus: z.string(),
    createdDate: z.string(),
    platform: z.string(),
    documentStatus: z.string(),
    features: z.object({
      rpaEnabled: z.boolean(),
      viewBalance: z.boolean(),
      useBalance: z.boolean(),
      marketOrder: z.boolean(),
      quickTransactionsEnabled: z.boolean(),
    }),
    sameCurrencySupported: z.boolean(),
    canProvideRecipientLater: z.boolean(),
    balancesEnabled: z.boolean(),
    transactionViewEnabled: z.boolean(),
    canSetupInputterAuthoriserUserRoles: z.boolean(),
    userRole: z.object({
      name: z.string(),
      privileges: z.array(z.string()),
    }),
    expectedTradeCurrency: s.currencyCode,
    expectedPayoutCurrency: s.currencyCode,
    expectedAnnualTradingVolume: z.number(),
    regionalAccountingCurrency: s.currencyCode,
    expectedVolumeInRegionalAccountingCurrency: z.number(),
    expectedFrequency: z.string(),
    onlineDirectDebitEnabled: z.boolean(),
    canUseOnlineDealing: z.boolean(),
    unitcode: z.string(),
    brandId: z.number(),
    lastTradedDate: z.string(),
    maxScheduledPaymentDays: z.number(),
    onlineCredentialStatus: z.string(),
    modifyRolesEnabled: z.boolean(),
  }),
  id: z.number(),
  firstName: z.string(),
  lastName: z.string(),
  address: z.string(),
  city: z.string(),
  postalCode: z.string(),
  country: z.string(),
  homePhone: z.object({
    isValid: z.boolean(),
  }),
  mobilePhone: z.object({
    countryCode: z.number(),
    number: z.string(),
    phoneNumberNoAreaCode: z.string(),
    phoneNumberFormatted: z.string(),
    isValid: z.boolean(),
  }),
  twoFANumber: z.object({
    isValid: z.boolean(),
  }),
  dateOfBirth: z.string(),
  securityQuestions: z.array(z.unknown()),
  willReceiveEmailMarketing: z.boolean(),
  willReceiveSmsMarketing: z.boolean(),
  willReceiveSmsNotifications: z.boolean(),
  disabled: z.boolean(),
  hasTaxId: z.boolean(),
  identification: z.object({
    customerId: z.number(),
    manualApprovalFound: z.boolean(),
    idVerificationRequired: z.boolean(),
  }),
  status: z.object({
    profileActionsRequired: z.array(z.unknown()),
    canTransact: z.boolean(),
    kycFailed: z.boolean(),
  }),
  willReceivePhoneMarketing: z.boolean(),
  willReceivePostalMarketing: z.boolean(),
  preferredLanguage: z.string(),
  isKycRefreshRequired: z.boolean(),
  fxWebCorpMigrated: z.boolean(),
  extraFields: z.object({
    addressLine1: z.string(),
    addressLine2: z.string().nullable(),
    addressLine3: z.string().nullable(),
    place: z.string(),
    county: z.string(),
    shortCounty: z.string().nullable(),
    postalCode: z.string(),
  }),
});

export type XeProfile = z.infer<typeof xeProfileSchema>;

export const profileToXeProfile = (
  rawProfile: z.infer<typeof s.profile.select>
) => {
  return {
    firstName: rawProfile.fullNameFirstName,
    lastName: rawProfile.fullNameLastName,
    email: rawProfile.email,
    postalCode: rawProfile.freeFormatAddressPostalCode,
    country: rawProfile.country,
    homePhone: {
      isValid: true,
    },
    mobilePhone: {
      countryCode: parseInt(rawProfile.mobileNumberPrefix.replace("+", "")),
      number: rawProfile.mobileNumberPhone,
      phoneNumberNoAreaCode: rawProfile.mobileNumberPhone,
      phoneNumberFormatted: `${rawProfile.mobileNumberPrefix}${rawProfile.mobileNumberPhone}`,
      isValid: true,
    },
    twoFANumber: {
      isValid: true,
    },
    dateOfBirth: rawProfile.dateOfBirth,
    securityQuestions: [],
    willReceiveEmailMarketing: false,
    willReceiveSmsMarketing: false,
    willReceiveSmsNotifications: false,
    disabled: false,
    hasTaxId: true,
    identification: {
      customerId: rawProfile.clientId,
      manualApprovalFound: false,
      idVerificationRequired: false,
    },
    status: {
      profileActionsRequired: [],
      canTransact: rawProfile.accountStatus === "Active",
      kycFailed: rawProfile.accountKycStatus !== "Approved",
    },
    willReceivePhoneMarketing: false,
    willReceivePostalMarketing: false,
    preferredLanguage: rawProfile.preferredLanguage,
    isKycRefreshRequired: rawProfile.kycRefreshStatus !== "Valid",
    fxWebCorpMigrated: true,
    extraFields: {
      addressLine1: rawProfile.freeFormatAddressLine1,
      addressLine2: null,
      addressLine3: null,
      place: rawProfile.freeFormatAddressPlace,
      county: rawProfile.freeFormatAddressCounty,
      shortCounty: null,
      postalCode: rawProfile.freeFormatAddressPostalCode,
    },
  };
};
